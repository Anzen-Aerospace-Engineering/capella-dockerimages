# SPDX-FileCopyrightText: Copyright DB Netz AG and the capella-collab-manager contributors
# SPDX-License-Identifier: Apache-2.0

variables:
  BASE:
    value: "0"
    description: "Build the base image?"
  CAPELLA_BASE:
    value: "0"
    description: "Build the capella/base image?"
  CAPELLA_CLI:
    value: "0"
    description: "Build the capella/cli image?"
  CAPELLA_REMOTE:
    value: "0"
    description: "Build the capella/remote image?"
  T4C_CLIENT_BASE:
    value: "0"
    description: "Build the t4c/client/base image?"
  T4C_CLIENT_BACKUP:
    value: "0"
    description: "Build the t4c/client/backup image?"
  T4C_CLIENT_EXPORTER:
    value: "0"
    description: "Build the t4c/client/exporter image?"
  T4C_CLIENT_REMOTE:
    value: "0"
    description: "Build the t4c/client/remote image?"
  T4C_CLIENT_REMOTE_PURE_VARIANTS:
    value: "0"
    description: "Build the t4c/client/remote/pure-variants image?"
  CAPELLA_EASE:
    value: "0"
    description: "Build the capella/ease image?"
  CAPELLA_EASE_REMOTE:
    value: "0"
    description: "Build the capella/ease/remote image?"
  CAPELLA_READONLY:
    value: "0"
    description: "Build the capella/readonly image?"
  T4C_CLIENT_EASE:
    value: "0"
    description: "Build the t4c/client/ease image?"
  T4C_CLIENT_EASE_REMOTE:
    value: "0"
    description: "Build the t4c/client/ease/remote image?"
  T4C_CLIENT_EASE_REMOTE_DEBUG:
    value: "0"
    description: "Build the t4c/client/ease/remote/debug image?"
  JUPYTER:
    value: "0"
    description: "Build the jupyter-notebook image?"
  PAPYRUS_BASE:
    value: "0"
    description: "Build the papyrus/base image?"
  PAPYRUS_REMOTE:
    value: "0"
    description: "Build the papyrus/remote image?"
  ECLIPSE_BASE:
    value: "0"
    description: "Build the eclipse/base image?"
  ECLIPSE_REMOTE:
    value: "0"
    description: "Build the eclipse/remote image?"
  ECLIPSE_REMOTE_PURE_VARIANTS:
    value: "0"
    description: "Build the eclipse/remote/pure-variants image?"
  CAPELLA_DOCKER_IMAGES_REVISION:
    value: "main"
    description: "Revision of the Capella Docker images Github repository (https://github.com/DSD-DBS/capella-dockerimages)"
  CAPELLA_VERSION:
    value: "6.0.0"
    description: "Capella version. Please make sure that a subdirectory with the name of the value exists. The value must be valid ASCII and may contain lowercase and uppercase letters, digits, underscores, periods and dashes."
  BUILD_FOR_LATEST_TAG:
    value: "0"
    description: "Fetch the latest tag for the image builder repository and use it as revision. If 0, '$CI_COMMIT_REF_NAME' will be used."
  JUPYTER_VERSION:
    value: "python-3.11"
    description: "Python version for the jupyter notebook."
  PAPYRUS_VERSION:
    value: "6.4.0"
    description: "Semantic version of Papyrus."
  ECLIPSE_VERSION:
    value: "4.27"
    description: "Semantic version of Eclipse."
  ENVIRONMENT:
    value: "staging"
    description: "Specifies the environment. Make sure that all related environment variables are set on the repository level. More information in the documentation."
  T4C_SERVER_REGISTRY: "" # Registry where you can find the t4c server image
  T4C_SERVER_TAG: "$CAPELLA_VERSION-main" # Tag that is used for the t4c server image
  T4C_SERVER_TEST_DATA_REPO: "" # Link to the t4c test data repo needed to run the backup tests
  LOCAL_GIT_BASE_IMAGE: "debian:bullseye" # Specifies the base images used to build the local git server needed to run the tests
  DOCKER_BUILD_ARGS: "--no-cache"
  BUILD_ARCHITECTURE: amd64
  PURE_VARIANTS_VERSION: "6.0.1"

stages:
  - build

default:
  image: $DOCKER_REGISTRY/base
  tags:
    - docker

.github: &github
  - git clone https://github.com/DSD-DBS/capella-dockerimages.git
  - cd capella-dockerimages
  - git checkout $CAPELLA_DOCKER_IMAGES_REVISION --

.docker: &docker
  - docker info
  - DOCKER_REGISTRY_USER_QUERY=DOCKER_REGISTRY_USER_${ENVIRONMENT_UPPERCASE}
  - DOCKER_REGISTRY_PASSWORD_QUERY=DOCKER_REGISTRY_PASSWORD_${ENVIRONMENT_UPPERCASE}
  - echo ${!DOCKER_REGISTRY_PASSWORD_QUERY:?} | docker login -u ${!DOCKER_REGISTRY_USER_QUERY:?} --password-stdin $DOCKER_REGISTRY
  - docker pull $BASE_IMAGE

.push: &push
  - docker push $IMAGE:$DOCKER_TAG

.ease: &ease
  - cp -R ../ease/extensions/* ease/extensions/

.prepare: &prepare
  - ENVIRONMENT_UPPERCASE=$(echo ${ENVIRONMENT:?} | tr '[:lower:]' '[:upper:]')
  - DOCKER_REGISTRY_QUERY=DOCKER_REGISTRY_${ENVIRONMENT_UPPERCASE}
  - DOCKER_REGISTRY=${!DOCKER_REGISTRY_QUERY:?}
  - >
    if [[ "$BUILD_FOR_LATEST_TAG" == "1" ]]; then
      git fetch --tags;
      IMAGE_BUILDER_REVISION=$(git describe --tags --abbrev=0);
      git checkout "$IMAGE_BUILDER_REVISION";
    else
      IMAGE_BUILDER_REVISION="$CI_COMMIT_REF_NAME"
    fi
  - GENERAL_IMAGE_TAG=$(echo $CAPELLA_DOCKER_IMAGES_REVISION | sed 's/[^a-zA-Z0-9.]/-/g')-$IMAGE_BUILDER_REVISION
  - IMAGE=${DOCKER_REGISTRY}/$IMAGE

.resolve-base-image: &resolve-base-image
  - BASE_IMAGE=${DOCKER_REGISTRY}/${BASE_IMAGE}
  - >
    if [[ "$BASE_IMAGE" == "$DOCKER_REGISTRY/base2" ]]; then
      BASE_IMAGE=$BASE_IMAGE:$GENERAL_IMAGE_TAG;
    else
      BASE_IMAGE=$BASE_IMAGE:$DOCKER_TAG;
    fi

.prepare-capella: &prepare-capella
  - *prepare
  - export DOCKER_TAG=$CAPELLA_VERSION-$GENERAL_IMAGE_TAG
  - *resolve-base-image
  - cd capella/versions/$CAPELLA_VERSION
  - *github

.prepare-papyrus: &prepare-papyrus
  - *prepare
  - export DOCKER_TAG=$PAPYRUS_VERSION-$GENERAL_IMAGE_TAG
  - *resolve-base-image
  - cd papyrus/versions/$PAPYRUS_VERSION
  - *github

.prepare-eclipse: &prepare-eclipse
  - *prepare
  - export DOCKER_TAG=$ECLIPSE_VERSION-$GENERAL_IMAGE_TAG
  - *resolve-base-image
  - cd eclipse/versions/$ECLIPSE_VERSION
  - *github

.prepare-eclipse-pv: &prepare-eclipse-pv
  - *prepare
  - export DOCKER_TAG=$ECLIPSE_VERSION-$PURE_VARIANTS_VERSION-$GENERAL_IMAGE_TAG
  - BASE_IMAGE="${DOCKER_REGISTRY}/${BASE_IMAGE}:$ECLIPSE_VERSION-$GENERAL_IMAGE_TAG"
  - cd pure-variants
  - *github

.local-git-server: &local-git-server
  - |
    docker build $DOCKER_BUILD_ARGS \
      -t local-git-server \
      --build-arg BASE_IMAGE=$LOCAL_GIT_BASE_IMAGE \
      tests/local-git-server

.prepare-tests-general: &prepare-tests-general
  - export LOCAL_GIT_TAG=latest
  - export DOCKER_PREFIX=${DOCKER_REGISTRY:?}/
  - apt-get update && apt-get -y install jq
  # This command lists docker containers, identifies the current job and writes the network ID of the current container into the DOCKER_NETWORK variable.
  - export DOCKER_NETWORK=$(docker inspect -f "{{json .NetworkSettings.Networks }}" $(docker ps -q -f "label=com.gitlab.gitlab-runner.job.id=$CI_JOB_ID" -f "label=com.gitlab.gitlab-runner.type=build") | jq -r 'keys[0]' | head -n 1)
  - *local-git-server
  - python -m venv .venv
  - source .venv/bin/activate
  - pip install -e '.[dev]'
  - cd tests

.prepare-t4c-server-tests: &prepare-t4c-server-tests
  - *prepare-tests-general
  - GIT_PASSWORD=${T4C_SERVER_TEST_DATA_REPO_TOKEN:?} git clone ${T4C_SERVER_TEST_DATA_REPO:?}

base:
  stage: build
  needs: []
  rules:
    - if: '$BASE == "1"'
      when: always
  variables:
    BASE_IMAGE: debian:bullseye
    IMAGE: base2
  script:
    - *prepare
    - DOCKER_TAG=$GENERAL_IMAGE_TAG
    - *github
    - *docker
    - UID_QUERY=UID_${ENVIRONMENT_UPPERCASE}
    - |
      docker build $DOCKER_BUILD_ARGS \
        -t $IMAGE:$DOCKER_TAG \
        --build-arg UID=${!UID_QUERY} \
        --build-arg BASE_IMAGE=$BASE_IMAGE \
        base
    - *push

capella/base:
  stage: build
  needs:
    - job: base
      optional: true
  rules:
    - if: '$CAPELLA_BASE == "1"'
      when: always
  variables:
    BASE_IMAGE: base2
    IMAGE: capella/base
  script:
    - *prepare-capella
    - *docker
    - mv ../capella.tar.gz ./capella/versions/$CAPELLA_VERSION/$BUILD_ARCHITECTURE/capella.tar.gz
    - >
      if [[ -n "$(find ../dropins -maxdepth 0 -type f)" ]]; then
        mv ../dropins/* ./capella/versions/$CAPELLA_VERSION/dropins/
      else
        echo "No files to move in dropins"
      fi
    - >
      if [[ -n "$(find ../patches -maxdepth 0 -type f)" ]]; then
        mv ../patches/* ./capella/versions/$CAPELLA_VERSION/patches/
      else
        echo "No files to move in patches"
      fi
    - mv ../../../libs/* ./capella/libs/
    - |
      docker build $DOCKER_BUILD_ARGS \
        -t $DOCKER_REGISTRY/capella/base:$DOCKER_TAG \
        --build-arg BUILD_TYPE=offline \
        --build-arg CAPELLA_VERSION=$CAPELLA_VERSION \
        --build-arg INJECT_PACKAGES=true \
        --build-arg BUILD_ARCHITECTURE="$BUILD_ARCHITECTURE" \
        --build-arg BASE_IMAGE=$BASE_IMAGE \
        capella
    - *push

capella/cli:
  stage: build
  needs:
    - job: capella/base
      optional: true
  rules:
    - if: '$CAPELLA_CLI == "1"'
      when: always
  variables:
    BASE_IMAGE: capella/base
    IMAGE: capella/cli
  script:
    - *prepare-capella
    - *docker
    - |
      docker build $DOCKER_BUILD_ARGS \
        -t $IMAGE:$DOCKER_TAG \
        --build-arg BASE_IMAGE=$BASE_IMAGE \
        cli
    - *push

capella/remote:
  stage: build
  needs:
    - job: capella/base
      optional: true
  rules:
    - if: '$CAPELLA_REMOTE == "1"'
      when: always
  variables:
    BASE_IMAGE: capella/base
    IMAGE: capella/remote
  script:
    - *prepare-capella
    - *docker
    - |
      docker build $DOCKER_BUILD_ARGS \
        -t $DOCKER_REGISTRY/capella/remote:$DOCKER_TAG \
        --build-arg BASE_IMAGE=$BASE_IMAGE \
        remote
    - *push

t4c/client/base:
  stage: build
  needs:
    - job: capella/base
      optional: true
  rules:
    - if: '$T4C_CLIENT_BASE == "1"'
      when: always
  variables:
    BASE_IMAGE: capella/base
    IMAGE: t4c/client/base
  script:
    - *prepare-capella
    - *docker
    - mv ../updateSite/* t4c/updateSite/$CAPELLA_VERSION/
    - |
      docker build $DOCKER_BUILD_ARGS \
        -t $DOCKER_REGISTRY/t4c/client/base:$DOCKER_TAG \
        --build-arg CAPELLA_VERSION=$CAPELLA_VERSION \
        --build-arg BASE_IMAGE=$BASE_IMAGE \
        t4c
    - *push

t4c/client/backup:
  stage: build
  needs:
    - job: t4c/client/base
      optional: true
  rules:
    - if: '$T4C_CLIENT_BACKUP == "1"'
      when: always
  variables:
    BASE_IMAGE: t4c/client/base
    IMAGE: t4c/client/backup
  script:
    - *prepare-capella
    - *docker
    - |
      docker build $DOCKER_BUILD_ARGS \
        -t $DOCKER_REGISTRY/t4c/client/backup:$DOCKER_TAG \
        --build-arg BASE_IMAGE=$BASE_IMAGE \
        --build-arg CAPELLA_VERSION=${CAPELLA_VERSION:?} \
        backups
    - *prepare-t4c-server-tests
    - pytest -o log_cli=true -s -m t4c_server test_backups.py || r=3
    - *push
    - exit $r
  allow_failure: &allow_failure
    exit_codes:
      - 3 # Exit code when pytest fail

t4c/client/exporter:
  stage: build
  needs:
    - job: t4c/client/base
      optional: true
  rules:
    - if: $CAPELLA_VERSION =~ /^5\.\d+\.\d+$/
      when: never
    - if: '$T4C_CLIENT_EXPORTER == "1"'
      when: always
  variables:
    BASE_IMAGE: t4c/client/base
    IMAGE: t4c/client/exporter
  script:
    - *prepare-capella
    - *docker
    - |
      docker build $DOCKER_BUILD_ARGS \
        -t $DOCKER_REGISTRY/t4c/client/exporter:$DOCKER_TAG \
        --build-arg BASE_IMAGE=$BASE_IMAGE \
        --build-arg CAPELLA_VERSION=$CAPELLA_VERSION \
        exporter
    - *prepare-t4c-server-tests
    - pytest -o log_cli=true -s -m t4c_server test_exporter_local.py test_exporter_git.py || r=3
    - *push
    - exit $r
  allow_failure: *allow_failure

t4c/client/remote:
  stage: build
  needs:
    - job: t4c/client/base
      optional: true
  rules:
    - if: '$T4C_CLIENT_REMOTE == "1"'
      when: always
  variables:
    BASE_IMAGE: t4c/client/base
    IMAGE: t4c/client/remote
  script:
    - *prepare-capella
    - *docker
    - |
      docker build $DOCKER_BUILD_ARGS \
        -t $DOCKER_REGISTRY/t4c/client/remote:$DOCKER_TAG \
        --build-arg BASE_IMAGE=$BASE_IMAGE \
        remote
    - *prepare-tests-general
    - pytest -o log_cli=true -s test_t4c_repository_injection.py || r=3
    - *push
    - exit $r
  allow_failure: *allow_failure

t4c/client/remote/pure-variants:
  stage: build
  needs:
    - job: t4c/client/remote
      optional: true
  rules:
    - if: '$T4C_CLIENT_REMOTE_PURE_VARIANTS == "1"'
      when: always
  variables:
    BASE_IMAGE: t4c/client/remote
    IMAGE: t4c/client/remote/pure-variants
  script:
    - *prepare-capella
    - *docker
    - mv ../../../../pure-variants/dependencies/* pure-variants/dependencies/
    - mv ../../../../pure-variants/updateSite/* pure-variants/versions/${PURE_VARIANTS_VERSION:?}
    - |
      docker build $DOCKER_BUILD_ARGS \
      -t $DOCKER_REGISTRY/t4c/client/remote/pure-variants:$DOCKER_TAG \
      --build-arg BUILD_TYPE=offline \
      --build-arg BASE_IMAGE=$BASE_IMAGE \
      --build-arg PURE_VARIANTS_VERSION="$PURE_VARIANTS_VERSION" \
      pure-variants
    - *push

capella/ease:
  stage: build
  needs:
    - job: capella/base
      optional: true
  rules:
    - if: '$CAPELLA_EASE == "1"'
      when: always
  variables:
    BASE_IMAGE: capella/base
    IMAGE: capella/ease
  script:
    - *prepare-capella
    - *docker
    - *ease
    - |
      docker build $DOCKER_BUILD_ARGS \
        -t $DOCKER_REGISTRY/capella/ease:$DOCKER_TAG \
        --build-arg BUILD_TYPE=offline \
        --build-arg BASE_IMAGE=$BASE_IMAGE \
        ease
    - *push

capella/ease/remote:
  stage: build
  needs:
    - job: capella/ease
      optional: true
  rules:
    - if: '$CAPELLA_EASE_REMOTE == "1"'
      when: always
  variables:
    BASE_IMAGE: capella/ease
    IMAGE: capella/ease/remote
  script:
    - *prepare-capella
    - *docker
    - |
      docker build $DOCKER_BUILD_ARGS \
        -t $DOCKER_REGISTRY/capella/ease/remote:$DOCKER_TAG \
        --build-arg BASE_IMAGE=$BASE_IMAGE \
        remote
    - *push

capella/readonly:
  stage: build
  needs:
    - job: capella/ease/remote
      optional: true
  rules:
    - if: '$CAPELLA_READONLY == "1"'
      when: always
  variables:
    BASE_IMAGE: capella/ease/remote
    IMAGE: capella/readonly
  script:
    - *prepare-capella
    - *docker
    - |
      docker build $DOCKER_BUILD_ARGS \
        -t $DOCKER_REGISTRY/capella/readonly:$DOCKER_TAG \
        --build-arg BASE_IMAGE=$BASE_IMAGE \
        readonly
    - *prepare-tests-general
    - pytest -o log_cli=true -s test_read_only.py || r=3
    - *push
    - exit $r
  allow_failure: *allow_failure

t4c/client/ease:
  stage: build
  needs:
    - job: t4c/client/base
      optional: true
  rules:
    - if: '$T4C_CLIENT_EASE == "1"'
      when: always
  variables:
    BASE_IMAGE: t4c/client/base
    IMAGE: t4c/client/ease
  script:
    - *prepare-capella
    - *docker
    - *ease
    - |
      docker build $DOCKER_BUILD_ARGS \
        -t $DOCKER_REGISTRY/t4c/client/ease:$DOCKER_TAG \
        --build-arg BUILD_TYPE=offline \
        --build-arg BASE_IMAGE=$BASE_IMAGE \
        ease
    - *push

t4c/client/ease/remote:
  stage: build
  needs:
    - job: t4c/client/ease
      optional: true
  rules:
    - if: '$T4C_CLIENT_EASE_REMOTE == "1"'
      when: always
  variables:
    BASE_IMAGE: t4c/client/ease
    IMAGE: t4c/client/ease/remote
  script:
    - *prepare-capella
    - *docker
    - |
      docker build $DOCKER_BUILD_ARGS \
        -t $IMAGE:$DOCKER_TAG \
        --build-arg BASE_IMAGE=$BASE_IMAGE \
        remote
    - *push

t4c/client/ease/remote/debug:
  stage: build
  needs:
    - job: t4c/client/ease/remote
      optional: true
  rules:
    - if: '$T4C_CLIENT_EASE_REMOTE_DEBUG == "1"'
      when: always
  variables:
    BASE_IMAGE: t4c/client/ease/remote
    IMAGE: t4c/client/ease/remote/debug
  script:
    - *prepare-capella
    - *docker
    - mkdir -p ease/debug/libs
    - mv ../ease/debug/code.deb ease/debug/libs/code.deb
    - |
      docker build $DOCKER_BUILD_ARGS \
        -t $IMAGE:$DOCKER_TAG \
        --build-arg NETWORK_ACCESS=restricted \
        --build-arg BASE_IMAGE=$BASE_IMAGE \
        ease/debug
    - *push

eclipse/base:
  stage: build
  needs:
    - job: base
      optional: true
  rules:
    - if: '$ECLIPSE_BASE == "1"'
      when: always
  variables:
    BASE_IMAGE: base2
    IMAGE: eclipse/base
  script:
    - *prepare-eclipse
    - *docker
    - mv ../eclipse.tar.gz ./eclipse/versions/$ECLIPSE_VERSION/$BUILD_ARCHITECTURE/eclipse.tar.gz
    - |
      docker build $DOCKER_BUILD_ARGS \
        -t ${IMAGE}:${DOCKER_TAG} \
        --build-arg ECLIPSE_VERSION=${ECLIPSE_VERSION} \
        --build-arg BASE_IMAGE=${BASE_IMAGE} \
        eclipse
    - *push

eclipse/remote:
  stage: build
  needs:
    - job: eclipse/base
      optional: true
  rules:
    - if: '$ECLIPSE_REMOTE == "1"'
      when: always
  variables:
    BASE_IMAGE: eclipse/base
    IMAGE: eclipse/remote
  script:
    - *prepare-eclipse
    - *docker
    - |
      docker build $DOCKER_BUILD_ARGS \
        -t ${IMAGE}:${DOCKER_TAG} \
        --build-arg BASE_IMAGE=$BASE_IMAGE \
        remote
    - *push

eclipse/remote/pure-variants:
  stage: build
  needs:
    - job: eclipse/remote
      optional: true
  rules:
    - if: '$ECLIPSE_REMOTE_PURE_VARIANTS == "1"'
      when: always
  variables:
    BASE_IMAGE: eclipse/remote
    IMAGE: eclipse/remote/pure-variants
  script:
    - *prepare-eclipse-pv
    - *docker
    - mv ../dependencies/* pure-variants/dependencies/
    - mv ../updateSite/* pure-variants/versions/${PURE_VARIANTS_VERSION:?}
    - |
      docker build $DOCKER_BUILD_ARGS \
        -t ${IMAGE}:${DOCKER_TAG} \
        --build-arg BUILD_TYPE=offline \
        --build-arg BASE_IMAGE=${BASE_IMAGE} \
        --build-arg PURE_VARIANTS_VERSION="$PURE_VARIANTS_VERSION" \
        pure-variants
    - *push

papyrus/base:
  stage: build
  needs:
    - job: base
      optional: true
  rules:
    - if: '$PAPYRUS_BASE == "1"'
      when: always
  variables:
    BASE_IMAGE: base2
    IMAGE: papyrus/base
  script:
    - *prepare-papyrus
    - *docker
    - mv ../papyrus.tar.gz ./papyrus/versions/$PAPYRUS_VERSION/papyrus.tar.gz
    - |
      docker build $DOCKER_BUILD_ARGS \
        -t ${IMAGE}:${DOCKER_TAG} \
        --build-arg PAPYRUS_VERSION=$PAPYRUS_VERSION \
        --build-arg BASE_IMAGE=$BASE_IMAGE \
        papyrus
    - *push

papyrus/remote:
  stage: build
  needs:
    - job: papyrus/base
      optional: true
  rules:
    - if: '$PAPYRUS_REMOTE == "1"'
      when: always
  variables:
    BASE_IMAGE: papyrus/base
    IMAGE: papyrus/remote
  script:
    - *prepare-papyrus
    - *docker
    - |
      docker build $DOCKER_BUILD_ARGS \
        -t ${IMAGE}:${DOCKER_TAG} \
        --build-arg BASE_IMAGE=$BASE_IMAGE \
        remote
    - *push

jupyter:
  stage: build
  needs:
    - job: base
      optional: true
  rules:
    - if: '$JUPYTER == "1"'
      when: always
  variables:
    BASE_IMAGE: base2
    IMAGE: jupyter-notebook
  script:
    - *prepare
    - DOCKER_TAG=python-3.11-$GENERAL_IMAGE_TAG
    - *resolve-base-image
    - *github
    - *docker
    - |
      docker build $DOCKER_BUILD_ARGS \
        -t $IMAGE:$DOCKER_TAG \
        --build-arg BASE_IMAGE=$BASE_IMAGE \
        jupyter-notebook
    - *push
